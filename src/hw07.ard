\import Utils
\import hw02 (gcd)
\import hw05 (pmap2)
\import hw06 (ReflTransClosure)
\import lect05 (funExt, true/=false)
\import lect06 (Decide, no, yes)
\import lect07

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.

\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.

\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair B A { | fst_ => b | snd_ => a }

-- При помощи \new и доступа к полям.

\func swap'' {A B : \Type} (p : Pair A B) : Pair B A =>
  \new Pair B A { | fst_ => p.snd_ | snd_ => p.fst_ }

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => p.p

\func one-isPos : PosNat 1 \cowith
  | p => ()

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record Coprime (n m : Nat)
  | gcd=1 : gcd n m = 1

\func Coprime60 => Coprime 60

-- 5. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\func nil/=cons {A : \Type} {x : A} {xs : List A} : Not (nil = cons x xs) =>
  \lam eq => transport (\lam xs => \case xs \with {
    | nil => \Sigma
    | cons _ _ => Empty
  }) eq ()

\func head {A : \Type} (x : A) (xs : List A) : A \elim xs
  | nil => x
  | cons x _ => x

\func tail {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons _ xs => xs

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => impl \where
  \func impl {A : \Type} {dec : Eq A} (xs ys : List A) : Decide (xs = ys)
    | nil, nil => yes idp
    | nil, cons _ _ => no nil/=cons
    | cons _ _, nil => no (\lam eq => nil/=cons (sym eq))
    | cons x xs, cons y ys => \case decideEq x y \with {
      | yes eq => \case impl xs ys \with {
        | yes teq => yes (pmap2 cons eq teq)
        | no tneq => no (\lam eq => tneq (pmap tail eq))
      }
      | no neq => no (\lam eq => neq (pmap (head x) eq))
    }

-- 6. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 1 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | left-id {A B : \Type} (a : A) (f : A -> F B) : (return a >>= f) = f a
  | right-id {A : \Type} (a : F A) : (a >>= return) = a
  | assoc {A B C : \Type} (a : F A)
          (f : A -> F B) (g : B -> F C) : ((a >>= f) >>= g) = (a >>= (\lam a => f a >>= g))
  | fmap {A B : \Type} (f : A -> B) (a : F A) => a >>= (\lam a => return (f a))
  | fmap-id {A : \Type} (y : F A) => right-id y
  | fmap-comp {A B C : \Type}
              (f : A -> B) (g : B -> C)
              (y : F A) =>
    (y >>= (\lam a => return (g (f a))))  ==< pmap (\lam h => y >>= h)
                                                   (funExt (\lam _ => F C)
                                                           (\lam a => sym (left-id (f a) (\lam b => return (g b))))) >==
    (y >>= (\lam a => return (f a) >>= (\lam b => return (g b))))
                                          ==< sym (assoc y
                                                         (\lam a => return (f a))
                                                         (\lam b => return (g b))) >==
    (y >>= (\lam a => return (f a)) >>= (\lam b => return (g b))) `qed

-- 7. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return => just
  | >>= => \lam a f => \case a \with {
    | nothing => nothing
    | just a => f a
  }
  | left-id => \lam _ _ => idp
  | right-id => \lam a => \case \elim a \with {
    | nothing => idp
    | just a => idp
  }
  | assoc => \lam a f g => \case \elim a \with {
    | nothing => idp
    | just a => idp
  }

-- 8. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Type) : Monad (\lam (A : \Type) => State S A)
  | return => \lam a => \new State { | state => \lam s => (s, a) }
  | >>= => \lam {A B : \Type} (sa : State S A) (f : A -> State S B) =>
      \new State { | state => \lam s => state {f (sa.state s).2} (sa.state s).1 }
  | left-id => \lam a f => idp
  | right-id => \lam {A : \Type} sa => idp
  | assoc => \lam a f g => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance State'Monad (S : \Type) : Monad (State' S)
  | return => \lam a => state' (\lam s => (s, a))
  | >>= => \lam sa f => \case sa \with {
    | state' tr => state' (\lam s => \case f (tr s).2 \with {
      | state' tr' => tr' (tr s).1
    })
  }
  | left-id => \lam {A : \Type} a f =>
      \case f a \as sa, idp : f a = sa
      \return state' (\lam s => \case sa \with {
      | state' tr' => tr' s
      }) = sa
      \with {
        | state' tr, fa=sa => idp
      }
  | right-id => \lam {A : \Type} (sa : State' S A) => \case \elim sa \with {
    | state' tr => idp
  }
  | assoc => \lam {A B C : \Type} (sa : State' S A) (f : A -> State' S B) (g : B -> State' S C) =>
      \case \elim sa \with {
        | state' tr => pmap state'
                            (funExt (\lam (s : S) => \Sigma S C)
                                    (\lam s =>
                                        \case f (tr s).2 \as sb, idp : f (tr s).2 = sb
                                        \return (\case g (\case sb \return \Sigma S B \with {
                                          | state' tr' => tr' (tr s).1
                                        }).2 \with {
                                          | state' tr' => tr' (\case sb \return \Sigma S B \with {
                                            | state' tr' => tr' (tr s).1
                                          }).1
                                        }) = (\case \case sb \return State' S C \with {
                                                      | state' tr => state' (\lam (s : S) => (\case g (tr s).2 \with {
                                                        | state' tr' => tr' (tr s).1
                                                      }))
                                                    } \with {
                                          | state' tr' => tr' (tr s).1
                                        })
                                        \with {
                                          | state' tr, fa=sb => idp
                                        }))
      }

-- 9. Определите \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => \lam a => var a
  | >>= => >>=-impl
  | left-id => {?}
  | right-id => {?}
  | assoc => {?} \where {
  \func \infixl 1 >>=-impl {V V' : \Type} (ta : Term V) (s : V -> Term V') : Term V' \elim ta
      | unit => unit
      | var v => s v
      | app l r => app (l >>=-impl s) (r >>=-impl s)
      | lam t => lam (t >>=-impl (\lam mv => \case mv \with {
        | nothing => var nothing
        | just a => s a >>=-impl (\lam v => var (just v))
      }))
  }

-- 10. Определите отношение многошаговой редукции на Term.

\func Red {V : \Type} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 11. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--     Определите любую стратегию редукции.

\func strategy {V : \Type} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s))
  | var v => no (\lam p => \case p.2 \with {})
  | unit => no (\lam p => \case p.2 \with {})
  | app t' s' => \case strategy t', strategy s' \with {
    | yes a, _ => yes (app a.1 s', appLeft a.2 idp)
    | _, yes a => yes (app t' a.1, appRight idp a.2)
    | no nt, no ns => \case \elim t' \with {
      | lam t'' => yes (t'' >>= maybe s' var, beta t'' idp idp)
      | var v => no (\lam p => \case p.1 \as s, p.2, idp : p.1 = s \with {
        | var v, r, p1=s => \case transport (\lam s => Red1 (app (var v) s') s) p1=s {?} \with {
          | beta f = =1 => {?}
        }
        | unit, r, p1=s => \case transport (\lam s => Red1 (app unit s') s) p1=s r \with {
          | beta f = =1 => {?}
        }
        | app t t1, r, p1=s => \case transport (\lam s => Red1 (app t' s') s) p1=s r \with {
          | appLeft r = => {?}
          | appRight = r => {?}
          | beta f = =1 => {?}
        }
        | lam t, r, p1=s => \case transport (\lam s => Red1 (app t' s') s) p1=s r \with {
          | beta f = =1 => {?}
        }
      })
      | unit => {?}
      | app t t1 => {?}
    }
  }
  | lam t' => \case strategy t' \with {
    | yes a => yes (lam a.1, lamRed a.2)
    | no n => no (\lam p => \case p.1 \as s, p.2, idp : p.1 = s \with {
      | var v, r, p1=s => \case transport (\lam s => Red1 (lam t') s) p1=s r \with {}
      | unit, r, p1=s => \case transport (\lam s => Red1 (lam t') s) p1=s r \with {}
      | app t t1, r, p1=s => \case transport (\lam s => Red1 (lam t') s) p1=s r \with {}
      | lam t, r, p1=s => \case transport (\lam s => Red1 (lam t') s) p1=s r \with {
        | lamRed lr => n (t, lr)
      }
    })
  }

-- 12. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B => {?}

-- если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B
\func substLem1 {U : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B) => {?}

-- 13. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A => {?}

-- 14. Закончите доказательство утверждения, что все типизируемые термы достижимы.

-- Это более общее утверждение необходимо для усиления индукционной гипотезы.
-- Для его доказательства потребуется вспомогательная лемма, которая говорит, что если термы a и b достижимы, и b[a/x] лежит в интерпретации B, то и (\x.b) a лежит в ней.

\func typeableInterp {V : \Type} (ctx : V -> Type) (env : V -> Term V) (C : \Pi (v : V) -> Interp (ctx v) (env v)) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T (t >>= env) => {?}

-- Это утверждение легко следует из предыдущего.

\func typeableInterpId {V : \Type} (ctx : V -> Type) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T t => {?}
