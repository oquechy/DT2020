\import lect02 \hiding (+, *)
\open Nat \hiding (-, div)

-- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:

\func if (b : Bool) {A : \Type} (t e : A) : A \elim b
  | true => t
  | false => e

{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x x y

\func test-|| : if true 1 2 = 1 => idp

-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | zero => 1
  | suc y' => x * x ^ y'

\func test-^ : 2 ^ 3 = 8 => idp

\func fac (x : Nat) : Nat
  | zero => 1
  | suc x' => (x' + 1) * fac x'

\func test-fac : fac 4 = 24 => idp

-- 4. Определите mod и gcd.

\func mod (x y : Nat) : Nat => mod' x x y
  \where
    \func mod' (s x y : Nat) : Nat \elim s
      | 0 => 0
      | suc s => if (x < y) x (mod' s (x - y) y)

\func test-mod : mod 12 9 = 3 => idp

\func gcd (x y : Nat) => gcd' (x * 2) x y
  \where
    \func gcd' (s x y : Nat) : Nat \elim s
      | 0 => 0
      | suc s => if (y < x)
                    (gcd' s y x)
                    (\case x \with {
                      | zero => y
                      | suc x' => gcd' s (y `mod` x) x
                    })

\func test-gcd : gcd 9 12 = 3 => idp

-- 5. Определите (полиморфный) reverse для списков.

\func reverse {A : \Type} => reverse' {A} nil
  \where
    \func reverse' {A : \Type} (ys xs : List A) : List A \elim xs
      | nil => ys
      | cons x xs => reverse' (cons x ys) xs

\func xs => (cons 1 (cons 2 (cons 3 nil)))
\func rs => (cons 3 (cons 2 (cons 1 nil)))
\func test-reverse : reverse xs = rs => idp

-- 6. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func flip {A B C : \Type} (f : A -> B -> C) (b : B) (a : A) => f a b

\func filter {A : \Type} (f : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => \let | xs' => filter f xs \in if (f x) (cons x xs') xs'

\func sort {A : \Type} (cmp : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => filter ((flip cmp) x) xs ++ cons x (filter (cmp x) xs)

\func ys => (cons 3 (cons 1 (cons 2 (cons 4 (cons 6 (cons 5 nil))))))
\func ss => (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 nil))))))
\func test-sort : sort (\lam (x y : Nat) => x < y) ys = ss => idp
